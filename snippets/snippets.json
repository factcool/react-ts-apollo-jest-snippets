{
  "import": {
    "prefix": "imp",
    "body": "import ${2:moduleName} from '${1:module}'$0"
  },
  "importDestructing": {
    "prefix": "imd",
    "body": "import { $2 } from '${1:module}'$0"
  },
  "importEverything": {
    "prefix": "ime",
    "body": "import * as ${2:alias} from '${1:module}'$0"
  },
  "importAs": {
    "prefix": "ima",
    "body": "import { ${2:originalName} as ${3:alias} } from '${1:module}'$0"
  },
  "import React": {
    "prefix": "imr",
    "body": ["import React from 'react'", ""]
  },
  "exportDefault": {
    "prefix": "exp",
    "body": "export default $1$0"
  },
  "exportDestructing": {
    "prefix": "exd",
    "body": "export { $2 } from '${1:module}'$0"
  },
  "exportAs": {
    "prefix": "exa",
    "body": "export { ${2:originalName} as ${3:alias} } from '${1:module}'$0"
  },
  "forEach": {
    "prefix": "fre",
    "body": ["${1:array}.forEach(${2:currentItem} => {", "  ${0}", "})", ""],
    "description": "forEach statement"
  },
  "namedFunction": {
    "prefix": "fnn",
    "body": ["const ${1:name} = (${2:params}) => {", "  ${3}", "}", ""],
    "description": "Named arrow function"
  },
  "anonymousFunction": {
    "prefix": "fna",
    "body": ["(${1:params}) => {", "  ${2}", "}", ""],
    "description": "Anonymous arrow function"
  },
  "destructingObject": {
    "prefix": "dob",
    "body": "const {${1:propertyName}} = ${2:objectToDestruct}",
    "description": "Object destructing"
  },
  "destructingArray": {
    "prefix": "dar",
    "body": "const [${1:propertyName}] = ${2:arrayToDestruct}",
    "description": "Array destructing"
  },
  "reactComponent": {
    "prefix": "rc",
    "body": [
      "import React from 'react'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = (props: Props) => {",
      "  return (",
      "    <React.Fragment>",
      "      $0",
      "    </React.Fragment>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ],
    "description": "React arrow function component"
  },
  "reactTypescriptComponent": {
    "prefix": "rtc",
    "body": [
      "import React from 'react'",
      "",
      "interface Props {$2",
      "}",
      "",
      "const ${1:${TM_FILENAME_BASE}} = (props: Props) => {",
      "  const { $3 } = props;",
      "",
      "  return (",
      "    <React.Fragment>",
      "      $0",
      "    </React.Fragment>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ],
    "description": "React arrow function component with Typescript interface"
  },
  "reactMemoComponent": {
    "prefix": "rmc",
    "body": [
      "import React, { memo } from 'react'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = memo(function ${1:${TM_FILENAME_BASE}}() {",
      "  return (",
      "    <React.Fragment>",
      "      $0",
      "    </React.Fragment",
      "  )",
      "})",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ],
    "description": "React memo arrow function component"
  },
  "createContext": {
    "prefix": "context",
    "body": ["const ${1:contextName} = React.createContext()", ""],
    "description": "Create React context"
  },
  "createRef": {
    "prefix": "cref",
    "body": ["this.${1:refName}Ref = React.createRef()", ""],
    "description": "Create ref statement used inside constructor"
  },
  "forwardRef": {
    "prefix": "fref",
    "body": ["const ref = React.createRef()", ""],
    "description": "Forward ref statement used inside component"
  },
  "useState": {
    "prefix": "us",
    "body": [
      "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:initialState})"
    ]
  },
  "useEffect": {
    "prefix": "ue",
    "body": [
      "useEffect(() => {",
      "  return () => {",
      "    ${1:effect}",
      "  };",
      "}, [${2:input}])"
    ]
  },
  "useContext": {
    "prefix": "uc",
    "body": ["const ${1:context} = useContext(${2:contextValue})"]
  },
  "useReducer": {
    "prefix": "ur",
    "body": [
      "const [state, dispatch] = useReducer(${1:reducer}, ${2:initialState}, ${3:init})"
    ]
  },
  "useCallback": {
    "prefix": "ucb",
    "body": [
      "useCallback(",
      "  () => {",
      "    ${1:callback}",
      "  },",
      "  [${2:input}],",
      ")"
    ]
  },
  "useMemo": {
    "prefix": "um",
    "body": ["useMemo(() => ${1:function}, ${2:input})"]
  },
  "useRef": {
    "prefix": "ur",
    "body": ["const ${1:ref} = useRef(${2:initialValue})"]
  },
  "useImperativeHandle": {
    "prefix": "uih",
    "body": [
      "useImperativeHandle(",
      "  ${1:ref},",
      "  () => {",
      "    ${2:handler}",
      "  },",
      "  [${3:input}],",
      ")"
    ]
  },
  "useDebugValue": {
    "prefix": "udv",
    "body": ["useDebugValue(${1:value})"]
  },
  "useLayoutEffect": {
    "prefix": "ule",
    "body": [
      "useLayoutEffect(() => {",
      "  return () => {",
      "    ${1:effect}",
      "  },",
      "  [${2:input}]",
      "})"
    ]
  },
  "apolloQuery": {
    "prefix": "aq",
    "body": [
      "<Query query={QUERY_CONST}>",
      "  {({ data }) => (",
      "    ${1:{data}}",
      "  )}",
      "</Query>"
    ],
    "description": "Apollo react query simple"
  },
  "apolloQueryFull": {
    "prefix": "aqf",
    "body": [
      "<Query query={QUERY_CONST}>",
      "  {({ loading, error, data }) => {",
      "    if (loading) return \"Loading...\";",
      "    if (error) return `Error! ${error.message}`;",
      "    return (",
      "      ${1:{data}}",
      "    );",
      "  }}",
      "</Query>"
    ],
    "description": "Apollo react query full"
  },
  "apolloMutation": {
    "prefix": "am",
    "body": [
      "<Mutation",
      "  mutation={MUTATION_CONST}",
      ">",
      "  {mutationName => (",
      "    $1",
      "  )}",
      "</Mutation>"
    ],
    "description": "A simple react apollo mutation"
  },
  "apolloMutationRefetch": {
    "prefix": "amrf",
    "body": [
      "<Mutation",
      "  mutation={MUTATION_CONST}",
      "  refetchQueries={['${1:queryName}']}",
      ">",
      "  {mutationName => (",
      "   $2",
      "  )}",
      "</Mutation>"
    ],
    "description": "Apollo react mutation refetch"
  },
  "describeBlock": {
    "prefix": "testd",
    "body": ["describe('$1', () => {", "  $0", "})", ""],
    "description": "Testing `describe` block"
  },
  "itBlock": {
    "prefix": "testit",
    "body": ["it('should $1', () => {", "  $0", "})", ""],
    "description": "Testing `it` block"
  }
}
